// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::manual::{get_last_error, Color, FlData, FlString, Result};

#[allow(unused_imports)]
use bitflags::bitflags;

#[repr(C)]
pub struct ImageFfiApi {
    pub(crate) data: *const core::ffi::c_void,
    pub(crate) create_from_file:
        unsafe extern "C" fn(data: *const core::ffi::c_void, filename: FlString) -> u64,
    pub(crate) create_svg_from_file:
        unsafe extern "C" fn(data: *const core::ffi::c_void, filename: FlString, size: f32) -> u64,
    pub(crate) get_status:
        unsafe extern "C" fn(data: *const core::ffi::c_void, image: u64) -> ImageLoadStatus,
    pub(crate) get_info:
        unsafe extern "C" fn(data: *const core::ffi::c_void, image: u64) -> *const ImageInfo,
    pub(crate) get_data: unsafe extern "C" fn(data: *const core::ffi::c_void, image: u64) -> FlData,
}

#[cfg(feature = "static")]
extern "C" {
    pub fn fl_image_create_from_file_impl(
        data: *const core::ffi::c_void,
        filename: FlString,
    ) -> u64;
    pub fn fl_image_create_svg_from_file_impl(
        data: *const core::ffi::c_void,
        filename: FlString,
        size: f32,
    ) -> u64;
    pub fn fl_image_get_status_impl(data: *const core::ffi::c_void, image: u64) -> ImageLoadStatus;
    pub fn fl_image_get_info_impl(data: *const core::ffi::c_void, image: u64) -> *const ImageInfo;
    pub fn fl_image_get_data_impl(data: *const core::ffi::c_void, image: u64) -> FlData;
}

#[no_mangle]
pub static mut g_flowi_image_api: *const ImageFfiApi = std::ptr::null_mut();

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum ImageFormat {
    /// 8-bit per channel Red, Green and Blue
    Rgb = 0,
    /// 8-bit per channel Red, Green, Blue and Alpha
    Rgba = 1,
    /// 8-bit per channel Blue, Green and Red
    Bgr = 2,
    /// 8-bit per channel Blue, Green and Red and Alpha
    Bgra = 3,
    /// 8-bit per channel Alpha only
    Alpha = 4,
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum ImageLoadStatus {
    /// The image is still loading
    Loading = 0,
    /// The image has finished loading
    Loaded = 1,
    /// The image failed to load
    Failed = 2,
}

#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum SvgFlags {
    /// Render the SVG image using RGBA format
    Rgba = 0,
    /// Render the SVG image using Alpha only
    Alpha = 1,
}

#[repr(C)]
#[derive(Debug)]
pub struct ImageInfo {
    /// Format of the image. See the ImageFormat enum
    pub format: u32,
    /// width of the image
    pub width: u32,
    /// height of the Image
    pub height: u32,
    /// Number of frames. This is 1 for static images and > 1 for animated images
    pub frame_count: u32,
    /// How long each frame should be displayed for in milliseconds
    pub frame_delay: u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Image {
    pub handle: u64,
}

impl Image {
    /// Async Load image from url/file. Supported formats are: JPG, PNG, and GIF
    /// Notice that this will return a async handle so the data may not be acceassable directly.
    pub fn create_from_file(filename: &str) -> Image {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_create_from_file_impl(_api.data, FlString::new(filename));
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.create_from_file)(_api.data, FlString::new(filename));
            Image { handle: ret_val }
        }
    }

    /// Async load and render SVG from url/file. size is the size of the image in pixels.
    pub fn create_svg_from_file(filename: &str, size: f32) -> Image {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val =
                fl_image_create_svg_from_file_impl(_api.data, FlString::new(filename), size);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.create_svg_from_file)(_api.data, FlString::new(filename), size);
            Image { handle: ret_val }
        }
    }

    /// Get the status of the image. See the [ImageLoadStatus] enum
    pub fn get_status(image: Image) -> ImageLoadStatus {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_get_status_impl(_api.data, image.handle);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.get_status)(_api.data, image.handle);
            ret_val
        }
    }

    /// Get info about the image. Will be null if the image hasn't loaded yet or failed to load.
    pub fn get_info<'a>(image: Image) -> Result<&'a ImageInfo> {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_get_info_impl(_api.data, image.handle);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.get_info)(_api.data, image.handle);
            if ret_val.is_null() {
                Err(get_last_error())
            } else {
                Ok(&*ret_val)
            }
        }
    }

    /// Get data from the image. Will be null if the image hasn't loaded yet or failed to load.
    pub fn get_data<'a>(image: Image) -> Option<&'a [u8]> {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_get_data_impl(_api.data, image.handle);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.get_data)(_api.data, image.handle);
            if ret_val.data == std::ptr::null() {
                None
            } else {
                Some(std::slice::from_raw_parts(
                    ret_val.data as *const u8,
                    ret_val.size as _,
                ))
            }
        }
    }
}
