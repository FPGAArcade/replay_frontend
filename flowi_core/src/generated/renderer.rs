// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::manual::{get_last_error, Color, FlData, FlString, Result};

#[allow(unused_imports)]
use bitflags::bitflags;

#[allow(unused_imports)]
use crate::image::*;

#[repr(C)]
pub struct RendererFfiApi {
    pub(crate) data: *const core::ffi::c_void,
    pub(crate) get_texture: unsafe extern "C" fn(data: *const core::ffi::c_void, image: u64) -> u64,
}

#[cfg(feature = "static")]
extern "C" {
    pub fn fl_renderer_get_texture_impl(data: *const core::ffi::c_void, image: u64) -> u64;
}

#[no_mangle]
pub static mut g_flowi_renderer_api: *const RendererFfiApi = std::ptr::null_mut();

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture {
    pub handle: u64,
}

#[repr(C)]
#[derive(Debug)]
pub struct Renderer {
    _dummy: u32,
}

impl Renderer {
    /// Get a texture from the active Renderer given a image handle. The renderer can return None if the image handle isnt't valid or that that image hasn't been created as a texture yet
    pub fn get_texture(image: Image) -> Result<Texture> {
        unsafe {
            let _api = &*g_flowi_renderer_api;
            #[cfg(feature = "static")]
            let ret_val = fl_renderer_get_texture_impl(_api.data, image.handle);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.get_texture)(_api.data, image.handle);
            if ret_val == 0 {
                Err(get_last_error())
            } else {
                Ok(Texture { handle: ret_val })
            }
        }
    }
}
