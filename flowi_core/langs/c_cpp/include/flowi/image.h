///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "manual.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlImageFormat {
    // 8-bit per channel Red, Green and Blue
    FlImageFormat_Rgb = 0,
    // 8-bit per channel Red, Green, Blue and Alpha
    FlImageFormat_Rgba = 1,
    // 8-bit per channel Blue, Green and Red
    FlImageFormat_Bgr = 2,
    // 8-bit per channel Blue, Green and Red and Alpha
    FlImageFormat_Bgra = 3,
    // 8-bit per channel Alpha only
    FlImageFormat_Alpha = 4,
} FlImageFormat;

typedef enum FlImageLoadStatus {
    // The image is still loading
    FlImageLoadStatus_Loading = 0,
    // The image has finished loading
    FlImageLoadStatus_Loaded = 1,
    // The image failed to load
    FlImageLoadStatus_Failed = 2,
} FlImageLoadStatus;

typedef enum FlSvgFlags {
    // Render the SVG image using RGBA format
    FlSvgFlags_Rgba = 0,
    // Render the SVG image using Alpha only
    FlSvgFlags_Alpha = 1,
} FlSvgFlags;

typedef struct FlImageInfo {
    // Format of the image. See the ImageFormat enum
    uint32_t format;
    // width of the image
    uint32_t width;
    // height of the Image
    uint32_t height;
    // Number of frames. This is 1 for static images and > 1 for animated images
    uint32_t frame_count;
} FlImageInfo;

typedef uint64_t FlImage;

// Load image from file. Supported formats are:
// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
// PNG 1/2/4/8/16-bit-per-channel
// Notice that this will return a async handle so the data may not be acceassable directly.
static FlImage fl_image_create_from_file(const char* filename);

// Load image from file. Supported formats are:
// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
// PNG 1/2/4/8/16-bit-per-channel
// This call will block until the loading has finished. It's recommended to use the async version instead.
static FlImage fl_image_create_from_file_block(const char* filename);

// Get the status of the image. See the [ImageLoadStatus] enum
static FlImageLoadStatus fl_image_get_status(FlImage image);

// Get info about the image
static FlImageInfo* fl_image_get_info(FlImage image);

// Get data from the image.
static FlData fl_image_get_data(FlImage image);

#include "image.inl"
#ifdef __cplusplus
}
#endif
